syntax = "proto3";
option java_package = "com.codedog.rainbow.world.generated";
option java_outer_classname = "CommonProto";
option optimize_for = SPEED;

/**
关于协议制定的一些说明：
1. 对于数值类型不要适用如uint32;uint64等无符号类型，而应适用int32，int64。
2. 字段命名遵循单词全部用小写，每个单词之间用下划线（_)连接，尽量不要用简写，若适用简写也要是耳熟能详的简写
3. 每添加了一个Request或Response时，需要同步在MessageType中加一条与之对应的枚举值，大小写不敏感，单词之间可以加多个下划线
4. 老协议中表示玩家的ID由uid改变为role_id
5. 新协议中的流水Id命名规则为：xxx_sid，而xxx_id表示模板Id，如：hero_id(表示模板中定义的hero);hero_sid(表示数据的纪录ID）
*/
message ProtoPacket {
  // 包序，每个包的序号需递增，且每个客户端唯一
  uint32 sn = 1;
  // 服务器已确认收到的序号
  uint32 ack = 2;
  // 如果客户端同步等待，可使用该字段设置一个同步 ID
  uint32 sync = 3;
  // 消息负载，即协议具体内容
  bytes payload = 4;
  // 透传信息，服务器会原封不动回发给客户端。即使是请求处理发生错误时，该透传信息也会下发
  bytes rtd = 5;
  // 生成包的时间戳，单位：毫秒
  uint64 time = 6;
  // 校验和
  bytes checksum = 7;
  // 消息类型，即业务协议的类型
  MsgType type = 8;

  // 消息类型，即“业务协议的类型”。
  // 这里内置了几个常见的消息类型
  enum MsgType {
    Unknown = 0;
    Error = 10001;
    KeepAlive = 10002;
    Ping = 10003;
    Pong = 10004;
    Notice = 10005;
    Echo = 10006;

    GameEnterRequest = 20001;
    GameEnterResponse = 20002;
    ReconnectRequest = 1001;
    ReconnectResponse = 1002;
  }
}

message Error {
  ErrorCode code = 1;
  string msg = 2;

  enum ErrorCode {
    UNKNOWN = 0;

    // Add more...
  }
}

message KeepAlive {
}

message Ping {
}

message Pong {
}

message Notice {
  string text = 1;
}

message Echo {
  string text = 1;
}

